this matcher code  finds common matches between different sources, but it sometimes makes mistakes (i sent you the code settings and helper settings, i want to
example : the matcher associate this match from tounesbet source :
"{
                "match_id": 16020876,
                "date": "05/07/2025",
                "time": "19:30",
                "home_team": "Deportivo Armenio",
                "away_team": "Sacachispas",
                "1_odd": 1.837,
                "draw_odd": 3.74,
                "2_odd": 6.6,
                "1X_odd": 1.01,
                "12_odd": 1.2,
                "X2_odd": 2.2,
                "under_0.5_odd": 5.995,
                "over_0.5_odd": 1.08,
                "under_1.5_odd": 2.365,
                "over_1.5_odd": 1.727,
                "under_2.5_odd": 1.3,
                "over_2.5_odd": 2.97,
                "under_3.5_odd": 1.01,
                "over_3.5_odd": 6.49,
                "under_4.5_odd": 1.0,
                "over_4.5_odd": 10.835,
                "both_score_odd": 3.3,
                "both_noscore_odd": 1.36,
                "home_under_1.5_odd": 1.727,
                "home_over_1.5_odd": 2.475,
                "home_under_2.5_odd": 1.17,
                "home_over_2.5_odd": 4.95,
                "home_under_3.5_odd": 1.04,
                "home_over_3.5_odd": 9.9,
                "away_under_1.5_odd": 1.08,
                "away_under_2.5_odd": 1.01,
                "away_over_2.5_odd": 16.5,
                "home_noscore_both_halves_odd": 1.25,
                "home_score_both_halves_odd": 4.125,
                "away_noscore_both_halves_odd": 1.03,
                "away_score_both_halves_odd": 16.5,
                "first_half_under_0.5_odd": 2.2,
                "first_half_over_0.5_odd": 1.903,
                "first_half_under_1.5_odd": 1.2,
                "first_half_over_1.5_odd": 4.763,
                "first_half_under_2.5_odd": 1.04,
                "first_half_over_2.5_odd": 14.3,
                "home_noscore_second_half_odd": 2.31,
                "home_score_second_half_odd": 1.837,
                "away_noscore_second_half_odd": 1.33,
                "away_score_second_half_odd": 3.575
            },"
with this false match from 1xbet source :
"{
                "match_id": 635146437,
                "date": "05/07/2025",
                "time": "19:30",
                "home_team": "Deportivo Paraguayo",
                "away_team": "Canuelas",
                "1_odd": 4.5,
                "draw_odd": 2.875,
                "2_odd": 2,
                "1X_odd": 1.765,
                "12_odd": 1.39,
                "X2_odd": 1.184,
                "home_handicap_0.0_odd": 3.025,
                "away_handicap_0.0_odd": 1.384,
                "over_1.5_odd": 1.97,
                "under_1.5_odd": 1.832,
                "both_score_odd": 3.216,
                "both_noscore_odd": 1.32,
                "away_handicap_-1.0_odd": 3.264,
                "home_handicap_1.0_odd": 1.31,
                "away_handicap_-1.5_odd": 4.64,
                "home_handicap_1.5_odd": 1.192,
                "over_0.5_odd": 1.19,
                "under_0.5_odd": 4.33,
                "over_1.0_odd": 1.34,
                "under_1.0_odd": 3.1,
                "over_2.0_odd": 2.816,
                "under_2.0_odd": 1.4,
                "over_2.5_odd": 3.425,
                "under_2.5_odd": 1.288
            },"
while in 1xbet there is the tounesbet match real association :
"{
                "match_id": 635146535,
                "date": "05/07/2025",
                "time": "19:30",
                "home_team": "Deportivo Armenio",
                "away_team": "Sacachispas",
                "1_odd": 1.655,
                "draw_odd": 3.37,
                "2_odd": 5.95,
                "1X_odd": 1.112,
                "12_odd": 1.3,
                "X2_odd": 2.16,
                "home_handicap_-1.0_odd": 2.315,
                "away_handicap_1.0_odd": 1.61,
                "over_2.0_odd": 2.24,
                "under_2.0_odd": 1.65,
                "both_score_odd": 2.99,
                "both_noscore_odd": 1.36,
                "home_handicap_0.0_odd": 1.22,
                "away_handicap_0.0_odd": 4,
                "home_handicap_-1.5_odd": 3.01,
                "away_handicap_1.5_odd": 1.39,
                "home_handicap_-2.0_odd": 6.01,
                "away_handicap_2.0_odd": 1.13,
                "away_handicap_2.5_odd": 1.095,
                "over_1.0_odd": 1.21,
                "under_1.0_odd": 4.43,
                "over_1.5_odd": 1.625,
                "under_1.5_odd": 2.2,
                "over_2.5_odd": 2.816,
                "under_2.5_odd": 1.4,
                "over_3.0_odd": 5.19,
                "under_3.0_odd": 1.165
            },"
the code should have judged the last one i sent you as the real association for the match in the tounesbet source
note that the tounesbet source doesn t contain the match of Deportivo Paraguayo vs Canuelas in its source
i think my explanation for this (not sure) is that when the code process the match Deportivo Paraguayo vs Canuelas from the 1xbet and tries to find its symmetric in the other source (Tounesbet), the code doesn t find that exact match in Tounesbet but finds another match (Deportivo Armenio vs Sacachispas from the Tounesbet) that manages to pass the threshold minimum values (low ressemblance but enough), and the code consider these two as the same match, and when the code process the Deportivo Armenio vs Sacachispas from the 1xbet source and tries to find that match in tounesbet it finds the Deportivo Armenio vs Sacachispas in the tounesbet source, but the code doesn t consider them the same match because that match from tounesbet was already assimlated with another match from that 1xbet source even though the resemblance is quite higher than the previous resemblance between the false match in 1xbet and the tounesbet match. is there a solution for this to avoid this skipping mechanism that can assimalate false matches with each other instead of their real matches 
don t change anything not related to my request (preserve the current logic and only change the logic that is related to my request)
write the modified functions in your response (or the newly created ones in they exist)
this is my opinion on how to approach this problem, when source a match finds the best match from source b with a score x (the scores that are already used by the original code), that match from source b tries to find the best match from source a with score y, if the found match is the same we mentioned from source a then its the same match, if they are not the same the code will compare x and y and picks the highest score between two matches ans consider them the same